import requests
import json
import webbrowser
import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime

# Define the list of airport codes
airports = ['KWWR', 'KHSD', 'KOKC', 'KPWA', 'KTIK', 'KOUN', 'KGOK']

def open_website():
    # This function opens the website in the default web browser
    webbrowser.open("https://www.aviationweather.gov/")

# HTML template
html_template = """
<html>
<head>
    <title>Weather Report</title>
    <style>
        table, th, td {{
            border: 1px solid black;
            border-collapse: collapse;
        }}
    </style>
</head>
<body>
    <h1>Weather Report</h1>
    <table>
        <tr>
            <th>Airport</th>
            <th>Report Time</th>
            <th>Flight Rules</th>
            <th>Wind</th>
            <th>Visibility</th>
            <th>Clouds</th>
        </tr>
        {}
    </table>
</body>
</html>
"""

def fetch_weather():
    # Change the button color to indicate that it's being pressed
    button.config(bg='yellow')

    # Clear the text widget
    text_widget.delete('1.0', tk.END)

    # Initialize the table rows for the HTML file
    table_rows = ""
    
    # For each airport code, send a GET request to the AVWX API
    for airport in airports:
        url = f'https://avwx.rest/api/metar/{airport}'
        headers = {'Authorization': 'noG0H58Qn5ftLv8X0-nCfiax2lqhgnoaGzC2W3ND8pk'}
        response = requests.get(url, headers=headers)
        # Check that the request was successful
        if response.status_code == 200:
            # Parse the JSON response
            data = json.loads(response.text)

            # Print the airport code and conditions
            text_widget.insert(tk.END, f"Airport: {airport}\n")
            text_widget.insert(tk.END, f"METAR Report Time: {data['time']['dt']}\n")
            flight_rules = data['flight_rules']
            text_widget.insert(tk.END, f"Flight Rules: {flight_rules}\n", flight_rules)
            # Check and print the winds
            if 'wind_speed' in data and 'wind_direction' in data and data['wind_speed'] is not None and data['wind_direction'] is not None:
                text_widget.insert(tk.END, f"Wind: {data['wind_direction']['repr']}° at {data['wind_speed']['repr']} knots\n")
            else:
                text_widget.insert(tk.END, "Wind: No specific conditions reported.\n")
            # Check and print the visibility
            if 'visibility' in data:
                text_widget.insert(tk.END, f"Visibility: {data['visibility']['repr']} statute miles\n")
            else:
                text_widget.insert(tk.END, "Visibility: No specific conditions reported.\n")
            
            # Check and print the cloud ceiling
            if 'clouds' in data and data['clouds']:
                text_widget.insert(tk.END, "Clouds:\n")
                ceiling = None
                for cloud in data['clouds']:
                    text_widget.insert(tk.END, f"  - Type: {cloud['type']}, Altitude: {cloud['altitude']*100} feet\n")
                    # Check for cloud type and altitude to find the ceiling
                    if cloud['type'] in ['BKN', 'OVC'] and (ceiling is None or cloud['altitude']*100 > ceiling):
                        ceiling = cloud['altitude']*100
                if ceiling is not None:
                    text_widget.insert(tk.END, f"Ceiling: {ceiling} feet\n")
                else:
                    text_widget.insert(tk.END, "Ceiling: No specific conditions reported.\n")
            else:
                text_widget.insert(tk.END, "Clouds: No specific conditions reported.\n")

            text_widget.insert(tk.END, "------------------------\n")
            # Add the data to the table rows for the HTML file
            table_rows += "<tr>"
            table_rows += "<td>{}</td>".format(airport)
            table_rows += "<td>{}</td>".format(data['time']['dt'])
            table_rows += "<td>{}</td>".format(flight_rules)
            if 'wind_speed' in data and 'wind_direction' in data and data['wind_speed'] is not None and data['wind_direction'] is not None:
                table_rows += "<td>{}° at {} knots</td>".format(data['wind_direction']['repr'], data['wind_speed']['repr'])
            else:
                table_rows += "<td>No specific conditions reported.</td>"
            if 'visibility' in data:
                table_rows += "<td>{} statute miles</td>".format(data['visibility']['repr'])
            else:
                table_rows += "<td>No specific conditions reported.</td>"
            if 'clouds' in data and data['clouds']:
                clouds_data = ""
                for cloud in data['clouds']:
                    clouds_data += "Type: {}, Altitude: {} feet\n".format(cloud['type'], cloud['altitude']*100)
                table_rows += "<td>{}</td>".format(clouds_data)
            else:
                table_rows += "<td>No specific conditions reported.</td>"
            table_rows += "</tr>"
            
        else:
            text_widget.insert(tk.END, f"Failed to fetch data for {airport}\n")

    # Update the timestamp label
    timestamp_label.config(text=f"Last Refreshed: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    # Reset the button color
    button.config(bg='SystemButtonFace')

    # Create the HTML file
    with open("weather_report.html", "w") as file:
        file.write(html_template.format(table_rows))

# Create a new tkinter window
window = tk.Tk()
window.title("Cora's Airport Weather Widget")
# Add a text widget to display the weather data
text_widget = scrolledtext.ScrolledText(window)
text_widget.grid(row=0, column=0, sticky="nsew", columnspan=2)
text_widget.tag_config('VFR', foreground='green')
text_widget.tag_config('MVFR', foreground='blue')
text_widget.tag_config('IFR', foreground='red')
text_widget.tag_config('LIFR', foreground='purple')
# Add a button that fetches the weather data when clicked
button = tk.Button(window, text="Refresh", command=fetch_weather, relief="raised")
button.grid(row=1, column=0, sticky="ew")
# Add a button that opens the AvWx website when clicked
button_avwx = tk.Button(window, text="AviationWeather.gov", command=open_website, relief="raised")
button_avwx.grid(row=1, column=1, sticky="ew")
# Add a label to display the last update time
timestamp_label = tk.Label(window, text="")
timestamp_label.grid(row=2, column=1, sticky="e")
# Configure the grid to expand properly when the window is resized
window.grid_rowconfigure(0, weight=1)
window.grid_columnconfigure(0, weight=1)

# Fetch the initial weather data
fetch_weather()

# Start the tkinter event loop
window.mainloop()
